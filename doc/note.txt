架构
1. CAP理论定义的其实是在容忍网络分区的条件下，“强一致性”和“极致可用性”无法同时达到。



h2
1. 以mem模式运行，只能从程序中访问，数据库只存在于程序运行时内存中
2. 以file模式运行，也只能从程序中访问
3. 对象名默认都是大写的，可以在连接时加参数DATABASE_TO_UPPER=false来避免
4. 创建并拷贝表数据：create table information_schema.schemata as select * from INFORMATION_SCHEMA.SCHEMATA
5. 修改列名：ALTER TABLE tutorials_tbl ALTER COLUMN title RENAME TO tutorial_title


将一个表中的字段值更新到另一个表的字段中:
--使用where exists,则当数据存在时才会更新
update  sysrole role set system_name = (select system_name from temp_sysrole temp where role.rolename=temp.rolename)
where exists
(select system_name from temp_sysrole temp where role.rolename=temp.rolename)


# redis
Jedis和Lettuce的区别在哪？
1、Jedis 是直连模式，在多个线程间共享一个 Jedis 实例时是线程不安全的，每个线程都去拿自己的 Jedis 实例，可以使用连接池pool，
   这样每个线程单独使用一个jedis实例, 由此带来的问题时，如果线程数过多，带来redis server的负载加大。有点类似于BIO的模式。
2、Lettuce的连接是基于Netty的，连接实例可以在多个线程间共享，如果你不知道Netty也没事，大致意思就是一个多线程的应用可以使用同一个连接实例，
  而不用担心并发线程的数量。通过异步的方式可以让我们更好地利用系统资源。有点类似于NIO的模式。



spring cloud
1. 如不想将服务注册到Eureka Server，只需设置spring.cloud.service-registry.auto-registration.enabled=false，或@EnableDiscoveryClient(autoRegister = false) 即可。
2. 要加载bootstrap.yml需要引用org.springframework.cloud:spring-cloud-context
3. @RefreshScope默认是CGLIB代理，可能造成bean被代理两次而导致属性没注入，可使用@RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)解决。


spring扩展点
1. BeanDefinitionRegistryPostProcessor： 这个接口扩展了标准的BeanFactoryPostProcessor 接口，允许在普通的BeanFactoryPostProcessor接口实现类执行之前注册更多的BeanDefinition。
    	特别地是，BeanDefinitionRegistryPostProcessor可以注册BeanFactoryPostProcessor的BeanDefinition。
2. BeanFactoryPostProcessor： 这个接口允许自定义修改应用程序上下文的BeanDefinition，调整上下文的BeanFactory的bean属性值。应用程序上下文可以在BeanFactory的BeanDefinition中
	自动检测BeanFactoryPostProcessor bean，并在创建任何其他bean之前应用它们。对于定位于系统管理员的自定义配置文件非常有用，它们将覆盖应用程序上下文中配置的bean属性
3. InstantiationAwareBeanPostProcessor：这个接口是BeanPostProcessor的子接口，用于在实例化之后，但在设置显式属性或自动装配之前，设置实例化之前的回调函数。通常用于抑制特定目标bean的默认实例化，
	例如，创建具有特殊TargetSources（池化目标，延迟初始化目标等）的代理，或者实现其他注入策略，例如字段注入。注意：这个接口是一个专用接口，主要用于框架内的内部使用。 建议尽可能实现简单的BeanPostProcessor接口，
	或者从InstantiationAwareBeanPostProcessorAdapter派生，以便屏蔽此接口的扩展
4. BeanPostProcessor：这个接口，允许自定义修改新的bean实例，例如检查标记接口或用代理包装，注意，如果有相互依赖的bean，这里可能无法使用代理。
5. InitializingBean：



